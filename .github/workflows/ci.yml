name: CI
on:
  push:
    branches: [main]
  pull_request:
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: {python-version: "3.11"}
      - run: python -m pip install --quiet --upgrade pip
      - run: pip install --quiet poetry
      - run: poetry install --with dev
      - name: Validate pre-commit hooks are run
        run: pre-commit run --all-files --show-diff-on-failure
      - name: Ensure pre-commit config is properly installed
        run: |
          if ! git ls-files --error-unmatch .pre-commit-config.yaml; then
            echo "Error: .pre-commit-config.yaml file not found or not committed"
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: {python-version: "3.11"}
      - run: python -m pip install --quiet --upgrade pip
      - run: pip install --quiet poetry
      - run: poetry install --with dev
      - run: poetry run ruff check . --select=E,F,I,UP,B
      - run: poetry run mypy src orchestrator tests --strict --ignore-missing-imports
      - run: poetry run pytest -q

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up KinD
        uses: engineerd/setup-kind@v0.5.0

      - name: Deploy orchestrator
        run: |
          kubectl apply -f k8s/orchestrator-deployment.yaml
          kubectl rollout status deployment/orchestrator --timeout=180s

      - name: Smoke test
        run: |
          kubectl port-forward svc/orchestrator 8000:8000 &
          PF_PID=$!
          sleep 5
          curl -sf http://localhost:8000/health | grep -q '"status":"ok"'
          kill $PF_PID

  docs:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --quiet --upgrade pip
          pip install --quiet poetry
          poetry install --with dev

      - name: Build documentation
        run: poetry run mkdocs build

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          publish_branch: gh-pages
          full_commit_message: "docs: update documentation site"

  docker:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ghcr.io/crothmeier/ai-code-assistant:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/crothmeier/ai-code-assistant:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker image
        uses: docker/build-push-action@v5
        if: github.ref == 'refs/heads/main'
        with:
          context: .
          push: true
          tags: ghcr.io/crothmeier/ai-code-assistant:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
