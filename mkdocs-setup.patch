diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 4d48a34..e7ac7ad 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -4,17 +4,37 @@ on:
     branches: [main]
   pull_request:
 jobs:
+  pre-commit:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - uses: actions/setup-python@v5
+        with: {python-version: "3.11"}
+      - run: python -m pip install --quiet --upgrade pip
+      - run: pip install --quiet poetry
+      - run: poetry install --with dev
+      - name: Validate pre-commit hooks are run
+        run: pre-commit run --all-files --show-diff-on-failure
+      - name: Ensure pre-commit config is properly installed
+        run: |
+          if ! git ls-files --error-unmatch .pre-commit-config.yaml; then
+            echo "Error: .pre-commit-config.yaml file not found or not committed"
+            exit 1
+          fi
+
   test:
     runs-on: ubuntu-latest
+    needs: pre-commit
     steps:
       - uses: actions/checkout@v4
       - uses: actions/setup-python@v5
         with: {python-version: "3.11"}
       - run: python -m pip install --quiet --upgrade pip
-      - run: pip install --quiet .[dev] pytest pytest-asyncio ruff mypy
-      - run: ruff check .
-      - run: mypy src orchestrator tests --strict --ignore-missing-imports
-      - run: pytest -q
+      - run: pip install --quiet poetry
+      - run: poetry install --with dev
+      - run: poetry run ruff check . --select=E,F,I,UP,B
+      - run: poetry run mypy src orchestrator tests --strict --ignore-missing-imports
+      - run: poetry run pytest -q
 
   integration-test:
     runs-on: ubuntu-latest
@@ -37,3 +57,89 @@ jobs:
           sleep 5
           curl -sf http://localhost:8000/health | grep -q '"status":"ok"'
           kill $PF_PID
+  
+  docs:
+    runs-on: ubuntu-latest
+    needs: test
+    permissions:
+      contents: write
+    steps:
+      - name: Checkout repository
+        uses: actions/checkout@v4
+      
+      - name: Set up Python
+        uses: actions/setup-python@v5
+        with:
+          python-version: "3.11"
+      
+      - name: Install dependencies
+        run: |
+          python -m pip install --quiet --upgrade pip
+          pip install --quiet poetry
+          poetry install --with dev
+      
+      - name: Build documentation
+        run: poetry run mkdocs build
+      
+      - name: Deploy to GitHub Pages
+        if: github.ref == 'refs/heads/main'
+        uses: peaceiris/actions-gh-pages@v3
+        with:
+          github_token: ${{ secrets.GITHUB_TOKEN }}
+          publish_dir: ./site
+          publish_branch: gh-pages
+          full_commit_message: "docs: update documentation site"
+
+  docker:
+    runs-on: ubuntu-latest
+    needs: [test, integration-test]
+    permissions:
+      contents: read
+      packages: write
+      security-events: write
+    steps:
+      - name: Checkout repository
+        uses: actions/checkout@v4
+
+      - name: Set up Docker Buildx
+        uses: docker/setup-buildx-action@v3
+
+      - name: Log in to GitHub Container Registry
+        uses: docker/login-action@v3
+        with:
+          registry: ghcr.io
+          username: ${{ github.actor }}
+          password: ${{ secrets.GITHUB_TOKEN }}
+
+      - name: Build Docker image
+        uses: docker/build-push-action@v5
+        with:
+          context: .
+          push: false
+          load: true
+          tags: ghcr.io/crothmeier/ai-code-assistant:latest
+          cache-from: type=gha
+          cache-to: type=gha,mode=max
+
+      - name: Run Trivy vulnerability scanner
+        uses: aquasecurity/trivy-action@master
+        with:
+          image-ref: ghcr.io/crothmeier/ai-code-assistant:latest
+          format: 'sarif'
+          output: 'trivy-results.sarif'
+          severity: 'CRITICAL,HIGH'
+
+      - name: Upload Trivy scan results to GitHub Security tab
+        uses: github/codeql-action/upload-sarif@v2
+        with:
+          sarif_file: 'trivy-results.sarif'
+
+      - name: Push Docker image
+        uses: docker/build-push-action@v5
+        if: github.ref == 'refs/heads/main'
+        with:
+          context: .
+          push: true
+          tags: ghcr.io/crothmeier/ai-code-assistant:latest
+          cache-from: type=gha
+          cache-to: type=gha,mode=max
diff --git a/charts/llama-worker/_helpers.tpl b/charts/llama-worker/_helpers.tpl
index 69098e6..96a2a81 100644
--- a/charts/llama-worker/_helpers.tpl
+++ b/charts/llama-worker/_helpers.tpl
@@ -1,3 +1,3 @@
 {{- define "app.container.name" -}}
 {{ .Chart.Name }}-{{ .Values.name | default "app" }}-{{ .Release.Name }}
-{{- end -}}
\ No newline at end of file
+{{- end -}}
diff --git a/charts/llama-worker/templates/deployment.yaml b/charts/llama-worker/templates/deployment.yaml
index 0d409cc..a55c901 100644
--- a/charts/llama-worker/templates/deployment.yaml
+++ b/charts/llama-worker/templates/deployment.yaml
@@ -6,4 +6,4 @@ containers:
       drop: [ALL]        # 'ALL' already removes CAP_SYS_ADMIN
     readOnlyRootFilesystem: true
     allowPrivilegeEscalation: false
-    runAsNonRoot: true
\ No newline at end of file
+    runAsNonRoot: true
diff --git a/k8s/netpol-allow-dns.yaml b/k8s/netpol-allow-dns.yaml
index 097c8b9..95db6bb 100644
--- a/k8s/netpol-allow-dns.yaml
+++ b/k8s/netpol-allow-dns.yaml
@@ -14,4 +14,4 @@ spec:
         podSelector:
           matchLabels: { k8s-app: kube-dns }
     ports:
-      - { protocol: UDP, port: 53 }
\ No newline at end of file
+      - { protocol: UDP, port: 53 }
diff --git a/mypy.ini b/mypy.ini
index 0c1dfd4..f3b264a 100644
--- a/mypy.ini
+++ b/mypy.ini
@@ -2,4 +2,4 @@
 python_version = 3.11
 strict = True
 ignore_missing_imports = True
-show_error_codes = True
\ No newline at end of file
+show_error_codes = True
diff --git a/orchestrator/__init__.py b/orchestrator/__init__.py
index 8e43b15..2a903c7 100644
--- a/orchestrator/__init__.py
+++ b/orchestrator/__init__.py
@@ -1 +1 @@
-"""Marks orchestrator as a Python package so tests can import it."""
\ No newline at end of file
+"""Marks orchestrator as a Python package so tests can import it."""
diff --git a/orchestrator/app_breaker.py b/orchestrator/app_breaker.py
index 2169f0b..a4a0c91 100644
--- a/orchestrator/app_breaker.py
+++ b/orchestrator/app_breaker.py
@@ -1 +1 @@
-# circuit breaker excerpt
\ No newline at end of file
+# circuit breaker excerpt
diff --git a/orchestrator/router.py b/orchestrator/router.py
index 75983a5..582d51b 100644
--- a/orchestrator/router.py
+++ b/orchestrator/router.py
@@ -8,4 +8,4 @@ working while ensuring there is only ONE authoritative WeightedRouter class.
 
 from src.router.weighted_router import ModelEndpoint, WeightedRouter  # noqa: F401
 
-__all__ = ["WeightedRouter", "ModelEndpoint"]
\ No newline at end of file
+__all__ = ["WeightedRouter", "ModelEndpoint"]
diff --git a/pyproject.toml b/pyproject.toml
index 04dbb8b..a825380 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,23 +1,29 @@
-[project]
+[tool.poetry]
 name = "ai-code-assistant"
 version = "0.1.1"
 description = "FastAPI-based AI code assistant with GPU-aware routing"
-authors = [{ name = "crothmeier", email = "you@example.com" }]
+authors = ["crothmeier <you@example.com>"]
 readme = "README.md"
-requires-python = ">=3.11"
-dependencies = []
 
-[project.optional-dependencies]
-dev = [
-    "pytest",
-    "pytest-asyncio",
-    "ruff",
-    "mypy",
-]
+[tool.poetry.dependencies]
+python = ">=3.11,<3.12"
+fastapi = "^0.110.0"
+uvicorn = "^0.27.0"
+
+[tool.poetry.group.dev.dependencies]
+pytest = "^8.0.0"
+pytest-asyncio = "^0.23.0"
+ruff = "^0.3.0"
+mypy = "^1.7.0"
+pre-commit = "^3.5.0"
+mkdocs = "^1.5.3"
+mkdocs-material = "^9.5.0"
+mkdocstrings = "^0.24.0"
+mkdocstrings-python = "^1.7.0"
 
 [build-system]
-requires = ["setuptools>=61.0"]
-build-backend = "setuptools.build_meta"
+requires = ["poetry-core>=1.0.0"]
+build-backend = "poetry.core.masonry.api"
 
 [tool.ruff]
 target-version = "py311"
@@ -25,4 +31,4 @@ line-length = 100
 fix = true
 
 [tool.ruff.lint]
-select = ["E", "F", "I", "UP", "B"]
\ No newline at end of file
+select = ["E", "F", "I", "UP", "B"]
diff --git a/pytest.ini b/pytest.ini
index 5334198..1529553 100644
--- a/pytest.ini
+++ b/pytest.ini
@@ -1,4 +1,4 @@
 [pytest]
 markers =
     asyncio: mark a test as asyncio-compatible
-asyncio_default_fixture_loop_scope = function
\ No newline at end of file
+asyncio_default_fixture_loop_scope = function
diff --git a/src/router/weighted_router.py b/src/router/weighted_router.py
index f92268a..3ed2a93 100644
--- a/src/router/weighted_router.py
+++ b/src/router/weighted_router.py
@@ -25,9 +25,9 @@ class WorkerConfig(TypedDict, total=False):
 
 class WeightedRouter:
     def __init__(
-        self, 
-        endpoints: Optional[Sequence[ModelEndpoint]] = None, 
-        prom_url: Optional[str] = None, 
+        self,
+        endpoints: Optional[Sequence[ModelEndpoint]] = None,
+        prom_url: Optional[str] = None,
         preferred_gpu_type: Optional[str] = None
     ) -> None:
         self.endpoints: List[ModelEndpoint] = list(endpoints) if endpoints else []
@@ -44,7 +44,7 @@ class WeightedRouter:
         # Correct MiB â†’ GiB conversion
         gpu_memory_gib = gpu_info.total_memory_mib / 1024
         return gpu_memory_gib
-    
+
     def build_worker_config(self, gpu_info: GPUInfo) -> WorkerConfig:
         config: WorkerConfig = {"gpu_id": gpu_info.id}
         # Tune settings for NVIDIA T4 GPUs to curb PagedAttention fragmentation
@@ -52,9 +52,9 @@ class WeightedRouter:
             config["block_size"] = 8
             config["gpu_memory_utilization"] = 0.85
         return config
-        
+
     async def get_best_endpoint(self) -> Optional[ModelEndpoint]:
         """Returns the best endpoint based on weights."""
         # In a real implementation, this would use the cache and weights
         # For now, we just return the first endpoint if available
-        return self.endpoints[0] if self.endpoints else None
\ No newline at end of file
+        return self.endpoints[0] if self.endpoints else None
diff --git a/tests/test_router_gpu_select.py b/tests/test_router_gpu_select.py
index 6249436..78bab6b 100644
--- a/tests/test_router_gpu_select.py
+++ b/tests/test_router_gpu_select.py
@@ -12,4 +12,4 @@ def test_weighted_router_gpu_name_case_insensitive() -> None:
 
     gpu2 = MagicMock(spec=GPUInfo)
     gpu2.name = "nvidia-a100"
-    assert router.select_gpu(gpu2)
\ No newline at end of file
+    assert router.select_gpu(gpu2)
